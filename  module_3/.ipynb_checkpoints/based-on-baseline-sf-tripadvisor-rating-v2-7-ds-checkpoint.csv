{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](https://www.pata.org/wp-content/uploads/2014/09/TripAdvisor_Logo-300x119.png)\n",
    "# Predict TripAdvisor Rating\n",
    "## В этом соревновании нам предстоит предсказать рейтинг ресторана в TripAdvisor\n",
    "**По ходу задачи:**\n",
    "* Прокачаем работу с pandas\n",
    "* Научимся работать с Kaggle Notebooks\n",
    "* Поймем как делать предобработку различных данных\n",
    "* Научимся работать с пропущенными данными (Nan)\n",
    "* Познакомимся с различными видами кодирования признаков\n",
    "* Немного попробуем [Feature Engineering](https://ru.wikipedia.org/wiki/Конструирование_признаков) (генерировать новые признаки)\n",
    "* И совсем немного затронем ML\n",
    "* И многое другое...   \n",
    "\n",
    "\n",
    "\n",
    "### И самое важное, все это вы сможете сделать самостоятельно!\n",
    "\n",
    "*Этот Ноутбук являетсся Примером/Шаблоном к этому соревнованию (Baseline) и не служит готовым решением!*   \n",
    "Вы можете использовать его как основу для построения своего решения.\n",
    "\n",
    "> что такое baseline решение, зачем оно нужно и почему предоставлять baseline к соревнованию стало важным стандартом на kaggle и других площадках.   \n",
    "**baseline** создается больше как шаблон, где можно посмотреть как происходит обращение с входящими данными и что нужно получить на выходе. При этом МЛ начинка может быть достаточно простой, просто для примера. Это помогает быстрее приступить к самому МЛ, а не тратить ценное время на чисто инженерные задачи. \n",
    "Также baseline являеться хорошей опорной точкой по метрике. Если твое решение хуже baseline - ты явно делаешь что-то не то и стоит попробовать другой путь) \n",
    "\n",
    "В контексте нашего соревнования baseline идет с небольшими примерами того, что можно делать с данными, и с инструкцией, что делать дальше, чтобы улучшить результат.  Вообще готовым решением это сложно назвать, так как используются всего 2 самых простых признака (а остальные исключаются)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# import"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1058,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:35.543149Z",
     "iopub.status.busy": "2021-05-24T16:42:35.542816Z",
     "iopub.status.idle": "2021-05-24T16:42:35.563021Z",
     "shell.execute_reply": "2021-05-24T16:42:35.561177Z",
     "shell.execute_reply.started": "2021-05-24T16:42:35.543099Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/sf-dst-restaurant-rating/sample_submission.csv\n",
      "/kaggle/input/sf-dst-restaurant-rating/main_task.csv\n",
      "/kaggle/input/sf-dst-restaurant-rating/kaggle_task.csv\n",
      "/kaggle/input/emotionstxt/emotions.txt\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load in \n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns \n",
    "%matplotlib inline\n",
    "\n",
    "# Загружаем специальный удобный инструмент для разделения датасета:\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "from sklearn.preprocessing import MultiLabelBinarizer\n",
    "# Input data files are available in the \"../input/\" directory.\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# Any results you write to the current directory are saved as output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1059,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:35.566306Z",
     "iopub.status.busy": "2021-05-24T16:42:35.565647Z",
     "iopub.status.idle": "2021-05-24T16:42:35.582103Z",
     "shell.execute_reply": "2021-05-24T16:42:35.580290Z",
     "shell.execute_reply.started": "2021-05-24T16:42:35.566250Z"
    }
   },
   "outputs": [],
   "source": [
    "# всегда фиксируйте RANDOM_SEED, чтобы ваши эксперименты были воспроизводимы!\n",
    "RANDOM_SEED = 42"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1060,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:35.585376Z",
     "iopub.status.busy": "2021-05-24T16:42:35.584880Z",
     "iopub.status.idle": "2021-05-24T16:42:38.119989Z",
     "shell.execute_reply": "2021-05-24T16:42:38.118168Z",
     "shell.execute_reply.started": "2021-05-24T16:42:35.585290Z"
    }
   },
   "outputs": [],
   "source": [
    "# зафиксируем версию пакетов, чтобы эксперименты были воспроизводимы:\n",
    "!pip freeze > requirements.txt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1061,
   "metadata": {
    "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
    "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.123151Z",
     "iopub.status.busy": "2021-05-24T16:42:38.122822Z",
     "iopub.status.idle": "2021-05-24T16:42:38.372461Z",
     "shell.execute_reply": "2021-05-24T16:42:38.371290Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.123092Z"
    }
   },
   "outputs": [],
   "source": [
    "DATA_DIR = '/kaggle/input/sf-dst-restaurant-rating/'\n",
    "df_train = pd.read_csv(DATA_DIR+'/main_task.csv')\n",
    "df_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\n",
    "sample_submission = pd.read_csv(DATA_DIR+'/sample_submission.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1062,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.374355Z",
     "iopub.status.busy": "2021-05-24T16:42:38.374088Z",
     "iopub.status.idle": "2021-05-24T16:42:38.411082Z",
     "shell.execute_reply": "2021-05-24T16:42:38.409550Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.374309Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 40000 entries, 0 to 39999\n",
      "Data columns (total 10 columns):\n",
      "Restaurant_id        40000 non-null object\n",
      "City                 40000 non-null object\n",
      "Cuisine Style        30717 non-null object\n",
      "Ranking              40000 non-null float64\n",
      "Rating               40000 non-null float64\n",
      "Price Range          26114 non-null object\n",
      "Number of Reviews    37457 non-null float64\n",
      "Reviews              40000 non-null object\n",
      "URL_TA               40000 non-null object\n",
      "ID_TA                40000 non-null object\n",
      "dtypes: float64(3), object(7)\n",
      "memory usage: 3.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1063,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.412805Z",
     "iopub.status.busy": "2021-05-24T16:42:38.412455Z",
     "iopub.status.idle": "2021-05-24T16:42:38.433387Z",
     "shell.execute_reply": "2021-05-24T16:42:38.432103Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.412707Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Restaurant_id</th>\n",
       "      <th>City</th>\n",
       "      <th>Cuisine Style</th>\n",
       "      <th>Ranking</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Price Range</th>\n",
       "      <th>Number of Reviews</th>\n",
       "      <th>Reviews</th>\n",
       "      <th>URL_TA</th>\n",
       "      <th>ID_TA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>id_5569</td>\n",
       "      <td>Paris</td>\n",
       "      <td>['European', 'French', 'International']</td>\n",
       "      <td>5570.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>194.0</td>\n",
       "      <td>[['Good food at your doorstep', 'A good hotel ...</td>\n",
       "      <td>/Restaurant_Review-g187147-d1912643-Reviews-R_...</td>\n",
       "      <td>d1912643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>id_1535</td>\n",
       "      <td>Stockholm</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1537.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>[['Unique cuisine', 'Delicious Nepalese food']...</td>\n",
       "      <td>/Restaurant_Review-g189852-d7992032-Reviews-Bu...</td>\n",
       "      <td>d7992032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>id_352</td>\n",
       "      <td>London</td>\n",
       "      <td>['Japanese', 'Sushi', 'Asian', 'Grill', 'Veget...</td>\n",
       "      <td>353.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>$$$$</td>\n",
       "      <td>688.0</td>\n",
       "      <td>[['Catch up with friends', 'Not exceptional'],...</td>\n",
       "      <td>/Restaurant_Review-g186338-d8632781-Reviews-RO...</td>\n",
       "      <td>d8632781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>id_3456</td>\n",
       "      <td>Berlin</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3458.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[[], []]</td>\n",
       "      <td>/Restaurant_Review-g187323-d1358776-Reviews-Es...</td>\n",
       "      <td>d1358776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>id_615</td>\n",
       "      <td>Munich</td>\n",
       "      <td>['German', 'Central European', 'Vegetarian Fri...</td>\n",
       "      <td>621.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>84.0</td>\n",
       "      <td>[['Best place to try a Bavarian food', 'Nice b...</td>\n",
       "      <td>/Restaurant_Review-g187309-d6864963-Reviews-Au...</td>\n",
       "      <td>d6864963</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Restaurant_id       City                                      Cuisine Style  \\\n",
       "0       id_5569      Paris            ['European', 'French', 'International']   \n",
       "1       id_1535  Stockholm                                                NaN   \n",
       "2        id_352     London  ['Japanese', 'Sushi', 'Asian', 'Grill', 'Veget...   \n",
       "3       id_3456     Berlin                                                NaN   \n",
       "4        id_615     Munich  ['German', 'Central European', 'Vegetarian Fri...   \n",
       "\n",
       "   Ranking  Rating Price Range  Number of Reviews  \\\n",
       "0   5570.0     3.5    $$ - $$$              194.0   \n",
       "1   1537.0     4.0         NaN               10.0   \n",
       "2    353.0     4.5        $$$$              688.0   \n",
       "3   3458.0     5.0         NaN                3.0   \n",
       "4    621.0     4.0    $$ - $$$               84.0   \n",
       "\n",
       "                                             Reviews  \\\n",
       "0  [['Good food at your doorstep', 'A good hotel ...   \n",
       "1  [['Unique cuisine', 'Delicious Nepalese food']...   \n",
       "2  [['Catch up with friends', 'Not exceptional'],...   \n",
       "3                                           [[], []]   \n",
       "4  [['Best place to try a Bavarian food', 'Nice b...   \n",
       "\n",
       "                                              URL_TA     ID_TA  \n",
       "0  /Restaurant_Review-g187147-d1912643-Reviews-R_...  d1912643  \n",
       "1  /Restaurant_Review-g189852-d7992032-Reviews-Bu...  d7992032  \n",
       "2  /Restaurant_Review-g186338-d8632781-Reviews-RO...  d8632781  \n",
       "3  /Restaurant_Review-g187323-d1358776-Reviews-Es...  d1358776  \n",
       "4  /Restaurant_Review-g187309-d6864963-Reviews-Au...  d6864963  "
      ]
     },
     "execution_count": 1063,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1064,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.437247Z",
     "iopub.status.busy": "2021-05-24T16:42:38.436964Z",
     "iopub.status.idle": "2021-05-24T16:42:38.461149Z",
     "shell.execute_reply": "2021-05-24T16:42:38.460203Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.437200Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10000 entries, 0 to 9999\n",
      "Data columns (total 9 columns):\n",
      "Restaurant_id        10000 non-null object\n",
      "City                 10000 non-null object\n",
      "Cuisine Style        7693 non-null object\n",
      "Ranking              10000 non-null float64\n",
      "Price Range          6525 non-null object\n",
      "Number of Reviews    9343 non-null float64\n",
      "Reviews              9998 non-null object\n",
      "URL_TA               10000 non-null object\n",
      "ID_TA                10000 non-null object\n",
      "dtypes: float64(2), object(7)\n",
      "memory usage: 703.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df_test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1065,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.465004Z",
     "iopub.status.busy": "2021-05-24T16:42:38.464659Z",
     "iopub.status.idle": "2021-05-24T16:42:38.485087Z",
     "shell.execute_reply": "2021-05-24T16:42:38.483367Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.464948Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Restaurant_id</th>\n",
       "      <th>City</th>\n",
       "      <th>Cuisine Style</th>\n",
       "      <th>Ranking</th>\n",
       "      <th>Price Range</th>\n",
       "      <th>Number of Reviews</th>\n",
       "      <th>Reviews</th>\n",
       "      <th>URL_TA</th>\n",
       "      <th>ID_TA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>id_0</td>\n",
       "      <td>Paris</td>\n",
       "      <td>['Bar', 'Pub']</td>\n",
       "      <td>12963.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>[[], []]</td>\n",
       "      <td>/Restaurant_Review-g187147-d10746918-Reviews-L...</td>\n",
       "      <td>d10746918</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>id_1</td>\n",
       "      <td>Helsinki</td>\n",
       "      <td>['European', 'Scandinavian', 'Gluten Free Opti...</td>\n",
       "      <td>106.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>97.0</td>\n",
       "      <td>[['Very good reviews!', 'Fine dining in Hakani...</td>\n",
       "      <td>/Restaurant_Review-g189934-d6674944-Reviews-Ra...</td>\n",
       "      <td>d6674944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>id_2</td>\n",
       "      <td>Edinburgh</td>\n",
       "      <td>['Vegetarian Friendly']</td>\n",
       "      <td>810.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>28.0</td>\n",
       "      <td>[['Better than the Links', 'Ivy Black'], ['12/...</td>\n",
       "      <td>/Restaurant_Review-g186525-d13129638-Reviews-B...</td>\n",
       "      <td>d13129638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>id_3</td>\n",
       "      <td>London</td>\n",
       "      <td>['Italian', 'Mediterranean', 'European', 'Vege...</td>\n",
       "      <td>1669.0</td>\n",
       "      <td>$$$$</td>\n",
       "      <td>202.0</td>\n",
       "      <td>[['Most exquisite', 'Delicious and authentic']...</td>\n",
       "      <td>/Restaurant_Review-g186338-d680417-Reviews-Qui...</td>\n",
       "      <td>d680417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>id_4</td>\n",
       "      <td>Bratislava</td>\n",
       "      <td>['Italian', 'Mediterranean', 'European', 'Seaf...</td>\n",
       "      <td>37.0</td>\n",
       "      <td>$$$$</td>\n",
       "      <td>162.0</td>\n",
       "      <td>[['Always the best in bratislava', 'Very good ...</td>\n",
       "      <td>/Restaurant_Review-g274924-d1112354-Reviews-Ma...</td>\n",
       "      <td>d1112354</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Restaurant_id        City  \\\n",
       "0          id_0       Paris   \n",
       "1          id_1    Helsinki   \n",
       "2          id_2   Edinburgh   \n",
       "3          id_3      London   \n",
       "4          id_4  Bratislava   \n",
       "\n",
       "                                       Cuisine Style  Ranking Price Range  \\\n",
       "0                                     ['Bar', 'Pub']  12963.0    $$ - $$$   \n",
       "1  ['European', 'Scandinavian', 'Gluten Free Opti...    106.0    $$ - $$$   \n",
       "2                            ['Vegetarian Friendly']    810.0    $$ - $$$   \n",
       "3  ['Italian', 'Mediterranean', 'European', 'Vege...   1669.0        $$$$   \n",
       "4  ['Italian', 'Mediterranean', 'European', 'Seaf...     37.0        $$$$   \n",
       "\n",
       "   Number of Reviews                                            Reviews  \\\n",
       "0                4.0                                           [[], []]   \n",
       "1               97.0  [['Very good reviews!', 'Fine dining in Hakani...   \n",
       "2               28.0  [['Better than the Links', 'Ivy Black'], ['12/...   \n",
       "3              202.0  [['Most exquisite', 'Delicious and authentic']...   \n",
       "4              162.0  [['Always the best in bratislava', 'Very good ...   \n",
       "\n",
       "                                              URL_TA      ID_TA  \n",
       "0  /Restaurant_Review-g187147-d10746918-Reviews-L...  d10746918  \n",
       "1  /Restaurant_Review-g189934-d6674944-Reviews-Ra...   d6674944  \n",
       "2  /Restaurant_Review-g186525-d13129638-Reviews-B...  d13129638  \n",
       "3  /Restaurant_Review-g186338-d680417-Reviews-Qui...    d680417  \n",
       "4  /Restaurant_Review-g274924-d1112354-Reviews-Ma...   d1112354  "
      ]
     },
     "execution_count": 1065,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1066,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.487281Z",
     "iopub.status.busy": "2021-05-24T16:42:38.486804Z",
     "iopub.status.idle": "2021-05-24T16:42:38.503466Z",
     "shell.execute_reply": "2021-05-24T16:42:38.502689Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.487238Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Restaurant_id</th>\n",
       "      <th>Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>id_0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>id_1</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>id_2</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>id_3</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>id_4</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Restaurant_id  Rating\n",
       "0          id_0     2.0\n",
       "1          id_1     2.5\n",
       "2          id_2     4.0\n",
       "3          id_3     1.0\n",
       "4          id_4     4.0"
      ]
     },
     "execution_count": 1066,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_submission.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1067,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.505140Z",
     "iopub.status.busy": "2021-05-24T16:42:38.504870Z",
     "iopub.status.idle": "2021-05-24T16:42:38.522308Z",
     "shell.execute_reply": "2021-05-24T16:42:38.521376Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.505092Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10000 entries, 0 to 9999\n",
      "Data columns (total 2 columns):\n",
      "Restaurant_id    10000 non-null object\n",
      "Rating           10000 non-null float64\n",
      "dtypes: float64(1), object(1)\n",
      "memory usage: 156.4+ KB\n"
     ]
    }
   ],
   "source": [
    "sample_submission.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1068,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.523824Z",
     "iopub.status.busy": "2021-05-24T16:42:38.523542Z",
     "iopub.status.idle": "2021-05-24T16:42:38.568839Z",
     "shell.execute_reply": "2021-05-24T16:42:38.567370Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.523785Z"
    }
   },
   "outputs": [],
   "source": [
    "# ВАЖНО! дря корректной обработки признаков объединяем трейн и тест в один датасет\n",
    "df_train['sample'] = 1 # помечаем где у нас трейн\n",
    "df_test['sample'] = 0 # помечаем где у нас тест\n",
    "df_test['Rating'] = 0 # в тесте у нас нет значения Rating, мы его должны предсказать, по этому пока просто заполняем нулями\n",
    "\n",
    "data = df_test.append(df_train, sort=False).reset_index(drop=True) # объединяем"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1069,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.570571Z",
     "iopub.status.busy": "2021-05-24T16:42:38.570309Z",
     "iopub.status.idle": "2021-05-24T16:42:38.612133Z",
     "shell.execute_reply": "2021-05-24T16:42:38.611017Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.570527Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 50000 entries, 0 to 49999\n",
      "Data columns (total 11 columns):\n",
      "Restaurant_id        50000 non-null object\n",
      "City                 50000 non-null object\n",
      "Cuisine Style        38410 non-null object\n",
      "Ranking              50000 non-null float64\n",
      "Price Range          32639 non-null object\n",
      "Number of Reviews    46800 non-null float64\n",
      "Reviews              49998 non-null object\n",
      "URL_TA               50000 non-null object\n",
      "ID_TA                50000 non-null object\n",
      "sample               50000 non-null int64\n",
      "Rating               50000 non-null float64\n",
      "dtypes: float64(3), int64(1), object(7)\n",
      "memory usage: 4.2+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Подробнее по признакам:\n",
    "* City: Город \n",
    "* Cuisine Style: Кухня\n",
    "* Ranking: Ранг ресторана относительно других ресторанов в этом городе\n",
    "* Price Range: Цены в ресторане в 3 категориях\n",
    "* Number of Reviews: Количество отзывов\n",
    "* Reviews: 2 последних отзыва и даты этих отзывов\n",
    "* URL_TA: страница ресторана на 'www.tripadvisor.com' \n",
    "* ID_TA: ID ресторана в TripAdvisor\n",
    "* Rating: Рейтинг ресторана"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1070,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.613799Z",
     "iopub.status.busy": "2021-05-24T16:42:38.613497Z",
     "iopub.status.idle": "2021-05-24T16:42:38.638796Z",
     "shell.execute_reply": "2021-05-24T16:42:38.637726Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.613742Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Restaurant_id</th>\n",
       "      <th>City</th>\n",
       "      <th>Cuisine Style</th>\n",
       "      <th>Ranking</th>\n",
       "      <th>Price Range</th>\n",
       "      <th>Number of Reviews</th>\n",
       "      <th>Reviews</th>\n",
       "      <th>URL_TA</th>\n",
       "      <th>ID_TA</th>\n",
       "      <th>sample</th>\n",
       "      <th>Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20606</th>\n",
       "      <td>id_1755</td>\n",
       "      <td>Athens</td>\n",
       "      <td>['Mediterranean', 'Wine Bar']</td>\n",
       "      <td>1757.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>[['Closed down', 'Brand new love in town!'], [...</td>\n",
       "      <td>/Restaurant_Review-g189400-d7806471-Reviews-Ta...</td>\n",
       "      <td>d7806471</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14613</th>\n",
       "      <td>id_13209</td>\n",
       "      <td>London</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13219.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>[['Healthy', 'clean and pleasant'], ['02/18/20...</td>\n",
       "      <td>/Restaurant_Review-g186338-d9711563-Reviews-Su...</td>\n",
       "      <td>d9711563</td>\n",
       "      <td>1</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39579</th>\n",
       "      <td>id_2116</td>\n",
       "      <td>Budapest</td>\n",
       "      <td>['Mexican', 'American', 'European', 'Hungarian']</td>\n",
       "      <td>2117.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>17.0</td>\n",
       "      <td>[['ok food and ok staff', 'Ok food'], ['07/25/...</td>\n",
       "      <td>/Restaurant_Review-g274887-d12370768-Reviews-P...</td>\n",
       "      <td>d12370768</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39594</th>\n",
       "      <td>id_545</td>\n",
       "      <td>Geneva</td>\n",
       "      <td>['French', 'European', 'Grill']</td>\n",
       "      <td>548.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>59.0</td>\n",
       "      <td>[['Interesting People Watching', 'Traditional ...</td>\n",
       "      <td>/Restaurant_Review-g188057-d6865101-Reviews-Ga...</td>\n",
       "      <td>d6865101</td>\n",
       "      <td>1</td>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26282</th>\n",
       "      <td>id_789</td>\n",
       "      <td>Budapest</td>\n",
       "      <td>['Brew Pub', 'European', 'Pub', 'Gastropub', '...</td>\n",
       "      <td>790.0</td>\n",
       "      <td>$</td>\n",
       "      <td>8.0</td>\n",
       "      <td>[['Well worth a visit for beer and pub grub!',...</td>\n",
       "      <td>/Restaurant_Review-g274887-d12874827-Reviews-R...</td>\n",
       "      <td>d12874827</td>\n",
       "      <td>1</td>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Restaurant_id      City  \\\n",
       "20606       id_1755    Athens   \n",
       "14613      id_13209    London   \n",
       "39579       id_2116  Budapest   \n",
       "39594        id_545    Geneva   \n",
       "26282        id_789  Budapest   \n",
       "\n",
       "                                           Cuisine Style  Ranking Price Range  \\\n",
       "20606                      ['Mediterranean', 'Wine Bar']   1757.0    $$ - $$$   \n",
       "14613                                                NaN  13219.0         NaN   \n",
       "39579   ['Mexican', 'American', 'European', 'Hungarian']   2117.0    $$ - $$$   \n",
       "39594                    ['French', 'European', 'Grill']    548.0    $$ - $$$   \n",
       "26282  ['Brew Pub', 'European', 'Pub', 'Gastropub', '...    790.0           $   \n",
       "\n",
       "       Number of Reviews                                            Reviews  \\\n",
       "20606                4.0  [['Closed down', 'Brand new love in town!'], [...   \n",
       "14613                5.0  [['Healthy', 'clean and pleasant'], ['02/18/20...   \n",
       "39579               17.0  [['ok food and ok staff', 'Ok food'], ['07/25/...   \n",
       "39594               59.0  [['Interesting People Watching', 'Traditional ...   \n",
       "26282                8.0  [['Well worth a visit for beer and pub grub!',...   \n",
       "\n",
       "                                                  URL_TA      ID_TA  sample  \\\n",
       "20606  /Restaurant_Review-g189400-d7806471-Reviews-Ta...   d7806471       1   \n",
       "14613  /Restaurant_Review-g186338-d9711563-Reviews-Su...   d9711563       1   \n",
       "39579  /Restaurant_Review-g274887-d12370768-Reviews-P...  d12370768       1   \n",
       "39594  /Restaurant_Review-g188057-d6865101-Reviews-Ga...   d6865101       1   \n",
       "26282  /Restaurant_Review-g274887-d12874827-Reviews-R...  d12874827       1   \n",
       "\n",
       "       Rating  \n",
       "20606     4.0  \n",
       "14613     3.5  \n",
       "39579     3.0  \n",
       "39594     4.5  \n",
       "26282     4.5  "
      ]
     },
     "execution_count": 1070,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1071,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.640426Z",
     "iopub.status.busy": "2021-05-24T16:42:38.640160Z",
     "iopub.status.idle": "2021-05-24T16:42:38.647728Z",
     "shell.execute_reply": "2021-05-24T16:42:38.646812Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.640375Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"[['Very good reviews!', 'Fine dining in Hakaniemi'], ['12/05/2017', '10/29/2017']]\""
      ]
     },
     "execution_count": 1071,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.Reviews[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как видим, большинство признаков у нас требует очистки и предварительной обработки."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Cleaning and Prepping Data\n",
    "Обычно данные содержат в себе кучу мусора, который необходимо почистить, для того чтобы привести их в приемлемый формат. Чистка данных — это необходимый этап решения почти любой реальной задачи.   \n",
    "![](https://analyticsindiamag.com/wp-content/uploads/2018/01/data-cleaning.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Обработка NAN \n",
    "У наличия пропусков могут быть разные причины, но пропуски нужно либо заполнить, либо исключить из набора полностью. Но с пропусками нужно быть внимательным, **даже отсутствие информации может быть важным признаком!**   \n",
    "По этому перед обработкой NAN лучше вынести информацию о наличии пропуска как отдельный признак "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check all columns with nulls:\n",
    "\n",
    "#Cuisine Style        38410 non-null object\n",
    "\n",
    "#Price Range          32639 non-null object\n",
    "\n",
    "#Number of Reviews    46800 non-null float64\n",
    "\n",
    "#Reviews              49998 non-null object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1072,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.649018Z",
     "iopub.status.busy": "2021-05-24T16:42:38.648780Z",
     "iopub.status.idle": "2021-05-24T16:42:38.666267Z",
     "shell.execute_reply": "2021-05-24T16:42:38.665023Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.648983Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11590"
      ]
     },
     "execution_count": 1072,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "data['Cuisine Style'].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1073,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.668764Z",
     "iopub.status.busy": "2021-05-24T16:42:38.668277Z",
     "iopub.status.idle": "2021-05-24T16:42:38.687187Z",
     "shell.execute_reply": "2021-05-24T16:42:38.685661Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.668682Z"
    }
   },
   "outputs": [],
   "source": [
    "data['Cuisine Style_isNAN'] = pd.isna(data['Cuisine Style']).astype('uint8')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1074,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.689881Z",
     "iopub.status.busy": "2021-05-24T16:42:38.689367Z",
     "iopub.status.idle": "2021-05-24T16:42:38.705910Z",
     "shell.execute_reply": "2021-05-24T16:42:38.705187Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.689798Z"
    }
   },
   "outputs": [],
   "source": [
    "# Добавим новые столбцы категориальные для различного ценового диапазона, рестораны без данных по цене будут иметь во всех трех колонках\n",
    "# дешевый, средний, дорогой по нулю.\n",
    "data['Price Range']=data['Price Range'].fillna(value = '0')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1075,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.707795Z",
     "iopub.status.busy": "2021-05-24T16:42:38.707238Z",
     "iopub.status.idle": "2021-05-24T16:42:38.721122Z",
     "shell.execute_reply": "2021-05-24T16:42:38.720341Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.707739Z"
    }
   },
   "outputs": [],
   "source": [
    "# Для примера я возьму столбец Number of Reviews\n",
    "data['Number_of_Reviews_isNAN'] = pd.isna(data['Number of Reviews']).astype('uint8')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1076,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.722959Z",
     "iopub.status.busy": "2021-05-24T16:42:38.722423Z",
     "iopub.status.idle": "2021-05-24T16:42:38.736377Z",
     "shell.execute_reply": "2021-05-24T16:42:38.735697Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.722904Z"
    }
   },
   "outputs": [],
   "source": [
    "# Далее заполняем пропуски 0, вы можете попробовать заполнением средним или средним по городу и тд...\n",
    "data['Number of Reviews'].fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1077,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.738180Z",
     "iopub.status.busy": "2021-05-24T16:42:38.737650Z",
     "iopub.status.idle": "2021-05-24T16:42:38.772837Z",
     "shell.execute_reply": "2021-05-24T16:42:38.771279Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.738123Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Restaurant_id</th>\n",
       "      <th>City</th>\n",
       "      <th>Cuisine Style</th>\n",
       "      <th>Ranking</th>\n",
       "      <th>Price Range</th>\n",
       "      <th>Number of Reviews</th>\n",
       "      <th>Reviews</th>\n",
       "      <th>URL_TA</th>\n",
       "      <th>ID_TA</th>\n",
       "      <th>sample</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Cuisine Style_isNAN</th>\n",
       "      <th>Number_of_Reviews_isNAN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8168</th>\n",
       "      <td>id_8168</td>\n",
       "      <td>Lisbon</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3389.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>/Restaurant_Review-g189158-d12683988-Reviews-O...</td>\n",
       "      <td>d12683988</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9608</th>\n",
       "      <td>id_9608</td>\n",
       "      <td>Vienna</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1779.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>/Restaurant_Review-g190454-d12605368-Reviews-R...</td>\n",
       "      <td>d12605368</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Restaurant_id    City Cuisine Style  Ranking Price Range  \\\n",
       "8168       id_8168  Lisbon           NaN   3389.0           0   \n",
       "9608       id_9608  Vienna           NaN   1779.0           0   \n",
       "\n",
       "      Number of Reviews Reviews  \\\n",
       "8168                2.0     NaN   \n",
       "9608                0.0     NaN   \n",
       "\n",
       "                                                 URL_TA      ID_TA  sample  \\\n",
       "8168  /Restaurant_Review-g189158-d12683988-Reviews-O...  d12683988       0   \n",
       "9608  /Restaurant_Review-g190454-d12605368-Reviews-R...  d12605368       0   \n",
       "\n",
       "      Rating  Cuisine Style_isNAN  Number_of_Reviews_isNAN  \n",
       "8168     0.0                    1                        0  \n",
       "9608     0.0                    1                        1  "
      ]
     },
     "execution_count": 1077,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Let's check rows with reviews == Null. Looks like Restaurants just opened... \n",
    "#or there is no enought information or some problems with data entering\n",
    "data[data['Reviews'].isna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1078,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.774905Z",
     "iopub.status.busy": "2021-05-24T16:42:38.774553Z",
     "iopub.status.idle": "2021-05-24T16:42:38.790721Z",
     "shell.execute_reply": "2021-05-24T16:42:38.789498Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.774849Z"
    }
   },
   "outputs": [],
   "source": [
    "data['Reviews'] = data['Reviews'].fillna('[[], []]')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Обработка признаков\n",
    "Для начала посмотрим какие признаки у нас могут быть категориальными."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1079,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.793001Z",
     "iopub.status.busy": "2021-05-24T16:42:38.792554Z",
     "iopub.status.idle": "2021-05-24T16:42:38.943803Z",
     "shell.execute_reply": "2021-05-24T16:42:38.942477Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.792946Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Restaurant_id              13094\n",
       "City                          31\n",
       "Cuisine Style              10732\n",
       "Ranking                    12975\n",
       "Price Range                    4\n",
       "Number of Reviews           1574\n",
       "Reviews                    41857\n",
       "URL_TA                     49963\n",
       "ID_TA                      49963\n",
       "sample                         2\n",
       "Rating                        10\n",
       "Cuisine Style_isNAN            2\n",
       "Number_of_Reviews_isNAN        2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 1079,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.nunique(dropna=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Какие признаки можно считать категориальными?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для кодирования категориальных признаков есть множество подходов:\n",
    "* Label Encoding\n",
    "* One-Hot Encoding\n",
    "* Target Encoding\n",
    "* Hashing\n",
    "\n",
    "Выбор кодирования зависит от признака и выбраной модели.\n",
    "Не будем сейчас сильно погружаться в эту тематику, давайте посмотрим лучше пример с One-Hot Encoding:\n",
    "![](https://i.imgur.com/mtimFxh.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1080,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.945874Z",
     "iopub.status.busy": "2021-05-24T16:42:38.945522Z",
     "iopub.status.idle": "2021-05-24T16:42:38.958083Z",
     "shell.execute_reply": "2021-05-24T16:42:38.956372Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.945818Z"
    }
   },
   "outputs": [],
   "source": [
    "def assign_country (city):\n",
    "    countries = {\"London\": 'England',\n",
    "            'Paris':'France1', \n",
    "            'Madrid': 'France1',\n",
    "            'Barcelona': 'Spain1',\n",
    "            'Berlin': 'Germany1',\n",
    "            'Milan': 'Italy1',\n",
    "            'Rome': 'Italy1',\n",
    "            'Prague': 'Czech_Republic1',\n",
    "            'Lisbon': 'Portugal1',\n",
    "            'Vienna':  'Austria1',\n",
    "            'Amsterdam': 'Netherlands1',\n",
    "            'Brussels' : 'Belgium1',\n",
    "            'Hamburg' : 'Germany1',\n",
    "            'Munich': 'Germany1',\n",
    "            'Lyon' : 'France1',\n",
    "            'Stockholm': 'Sweden1',\n",
    "             'Budapest': 'Hungary1',\n",
    "             'Warsaw': 'Poland1',\n",
    "             'Dublin' : 'Ireland1',\n",
    "             'Copenhagen': 'Denmark1',\n",
    "             'Athens': 'Greek1',\n",
    "             'Edinburgh': 'Scotland1',\n",
    "             'Zurich':'Switzerland1',\n",
    "             'Oporto':'Portugal',\n",
    "             'Geneva':'Switzerland1',\n",
    "             'Krakow':'Polish1',\n",
    "             'Oslo': 'Norway1',\n",
    "             'Helsinki': 'Finland1',\n",
    "             'Bratislava': 'Slovakia1',\n",
    "             'Luxembourg': 'Luxembourg1',\n",
    "             'Ljubljana': 'Slovenia1'}\n",
    "    return countries[city]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1081,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:38.960441Z",
     "iopub.status.busy": "2021-05-24T16:42:38.960042Z",
     "iopub.status.idle": "2021-05-24T16:42:39.107981Z",
     "shell.execute_reply": "2021-05-24T16:42:39.106999Z",
     "shell.execute_reply.started": "2021-05-24T16:42:38.960381Z"
    }
   },
   "outputs": [],
   "source": [
    "data['Country'] = data['City'].apply(assign_country)\n",
    "country_df = pd.get_dummies(data.Country)\n",
    "data= data.join(country_df)\n",
    "data = pd.get_dummies(data, columns=[ 'Country',], dummy_na=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1082,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:39.111521Z",
     "iopub.status.busy": "2021-05-24T16:42:39.111107Z",
     "iopub.status.idle": "2021-05-24T16:42:39.175551Z",
     "shell.execute_reply": "2021-05-24T16:42:39.174117Z",
     "shell.execute_reply.started": "2021-05-24T16:42:39.111459Z"
    }
   },
   "outputs": [],
   "source": [
    "# для One-Hot Encoding в pandas есть готовая функция - get_dummies. Особенно радует параметр dummy_na\n",
    "data = pd.get_dummies(data, columns=[ 'City',], dummy_na=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1083,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:39.178256Z",
     "iopub.status.busy": "2021-05-24T16:42:39.177777Z",
     "iopub.status.idle": "2021-05-24T16:42:39.214186Z",
     "shell.execute_reply": "2021-05-24T16:42:39.212745Z",
     "shell.execute_reply.started": "2021-05-24T16:42:39.178178Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Restaurant_id</th>\n",
       "      <th>Cuisine Style</th>\n",
       "      <th>Ranking</th>\n",
       "      <th>Price Range</th>\n",
       "      <th>Number of Reviews</th>\n",
       "      <th>Reviews</th>\n",
       "      <th>URL_TA</th>\n",
       "      <th>ID_TA</th>\n",
       "      <th>sample</th>\n",
       "      <th>Rating</th>\n",
       "      <th>...</th>\n",
       "      <th>City_Oporto</th>\n",
       "      <th>City_Oslo</th>\n",
       "      <th>City_Paris</th>\n",
       "      <th>City_Prague</th>\n",
       "      <th>City_Rome</th>\n",
       "      <th>City_Stockholm</th>\n",
       "      <th>City_Vienna</th>\n",
       "      <th>City_Warsaw</th>\n",
       "      <th>City_Zurich</th>\n",
       "      <th>City_nan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>id_0</td>\n",
       "      <td>['Bar', 'Pub']</td>\n",
       "      <td>12963.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>[[], []]</td>\n",
       "      <td>/Restaurant_Review-g187147-d10746918-Reviews-L...</td>\n",
       "      <td>d10746918</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>id_1</td>\n",
       "      <td>['European', 'Scandinavian', 'Gluten Free Opti...</td>\n",
       "      <td>106.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>97.0</td>\n",
       "      <td>[['Very good reviews!', 'Fine dining in Hakani...</td>\n",
       "      <td>/Restaurant_Review-g189934-d6674944-Reviews-Ra...</td>\n",
       "      <td>d6674944</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>id_2</td>\n",
       "      <td>['Vegetarian Friendly']</td>\n",
       "      <td>810.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>28.0</td>\n",
       "      <td>[['Better than the Links', 'Ivy Black'], ['12/...</td>\n",
       "      <td>/Restaurant_Review-g186525-d13129638-Reviews-B...</td>\n",
       "      <td>d13129638</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>id_3</td>\n",
       "      <td>['Italian', 'Mediterranean', 'European', 'Vege...</td>\n",
       "      <td>1669.0</td>\n",
       "      <td>$$$$</td>\n",
       "      <td>202.0</td>\n",
       "      <td>[['Most exquisite', 'Delicious and authentic']...</td>\n",
       "      <td>/Restaurant_Review-g186338-d680417-Reviews-Qui...</td>\n",
       "      <td>d680417</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>id_4</td>\n",
       "      <td>['Italian', 'Mediterranean', 'European', 'Seaf...</td>\n",
       "      <td>37.0</td>\n",
       "      <td>$$$$</td>\n",
       "      <td>162.0</td>\n",
       "      <td>[['Always the best in bratislava', 'Very good ...</td>\n",
       "      <td>/Restaurant_Review-g274924-d1112354-Reviews-Ma...</td>\n",
       "      <td>d1112354</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 95 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Restaurant_id                                      Cuisine Style  Ranking  \\\n",
       "0          id_0                                     ['Bar', 'Pub']  12963.0   \n",
       "1          id_1  ['European', 'Scandinavian', 'Gluten Free Opti...    106.0   \n",
       "2          id_2                            ['Vegetarian Friendly']    810.0   \n",
       "3          id_3  ['Italian', 'Mediterranean', 'European', 'Vege...   1669.0   \n",
       "4          id_4  ['Italian', 'Mediterranean', 'European', 'Seaf...     37.0   \n",
       "\n",
       "  Price Range  Number of Reviews  \\\n",
       "0    $$ - $$$                4.0   \n",
       "1    $$ - $$$               97.0   \n",
       "2    $$ - $$$               28.0   \n",
       "3        $$$$              202.0   \n",
       "4        $$$$              162.0   \n",
       "\n",
       "                                             Reviews  \\\n",
       "0                                           [[], []]   \n",
       "1  [['Very good reviews!', 'Fine dining in Hakani...   \n",
       "2  [['Better than the Links', 'Ivy Black'], ['12/...   \n",
       "3  [['Most exquisite', 'Delicious and authentic']...   \n",
       "4  [['Always the best in bratislava', 'Very good ...   \n",
       "\n",
       "                                              URL_TA      ID_TA  sample  \\\n",
       "0  /Restaurant_Review-g187147-d10746918-Reviews-L...  d10746918       0   \n",
       "1  /Restaurant_Review-g189934-d6674944-Reviews-Ra...   d6674944       0   \n",
       "2  /Restaurant_Review-g186525-d13129638-Reviews-B...  d13129638       0   \n",
       "3  /Restaurant_Review-g186338-d680417-Reviews-Qui...    d680417       0   \n",
       "4  /Restaurant_Review-g274924-d1112354-Reviews-Ma...   d1112354       0   \n",
       "\n",
       "   Rating  ...  City_Oporto  City_Oslo  City_Paris  City_Prague  City_Rome  \\\n",
       "0     0.0  ...            0          0           1            0          0   \n",
       "1     0.0  ...            0          0           0            0          0   \n",
       "2     0.0  ...            0          0           0            0          0   \n",
       "3     0.0  ...            0          0           0            0          0   \n",
       "4     0.0  ...            0          0           0            0          0   \n",
       "\n",
       "   City_Stockholm  City_Vienna  City_Warsaw  City_Zurich  City_nan  \n",
       "0               0            0            0            0         0  \n",
       "1               0            0            0            0         0  \n",
       "2               0            0            0            0         0  \n",
       "3               0            0            0            0         0  \n",
       "4               0            0            0            0         0  \n",
       "\n",
       "[5 rows x 95 columns]"
      ]
     },
     "execution_count": 1083,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1084,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:39.215967Z",
     "iopub.status.busy": "2021-05-24T16:42:39.215684Z",
     "iopub.status.idle": "2021-05-24T16:42:39.268002Z",
     "shell.execute_reply": "2021-05-24T16:42:39.267226Z",
     "shell.execute_reply.started": "2021-05-24T16:42:39.215921Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Restaurant_id</th>\n",
       "      <th>Cuisine Style</th>\n",
       "      <th>Ranking</th>\n",
       "      <th>Price Range</th>\n",
       "      <th>Number of Reviews</th>\n",
       "      <th>Reviews</th>\n",
       "      <th>URL_TA</th>\n",
       "      <th>ID_TA</th>\n",
       "      <th>sample</th>\n",
       "      <th>Rating</th>\n",
       "      <th>...</th>\n",
       "      <th>City_Oporto</th>\n",
       "      <th>City_Oslo</th>\n",
       "      <th>City_Paris</th>\n",
       "      <th>City_Prague</th>\n",
       "      <th>City_Rome</th>\n",
       "      <th>City_Stockholm</th>\n",
       "      <th>City_Vienna</th>\n",
       "      <th>City_Warsaw</th>\n",
       "      <th>City_Zurich</th>\n",
       "      <th>City_nan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>30448</th>\n",
       "      <td>id_4718</td>\n",
       "      <td>['Thai']</td>\n",
       "      <td>4720.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>[['Nice Thai restaurant', 'Authentic and cheap...</td>\n",
       "      <td>/Restaurant_Review-g187323-d5510545-Reviews-Kr...</td>\n",
       "      <td>d5510545</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48905</th>\n",
       "      <td>id_1682</td>\n",
       "      <td>['Italian', 'Pizza']</td>\n",
       "      <td>1688.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>24.0</td>\n",
       "      <td>[['AVOID', '2 hours late cardboard pizza :('],...</td>\n",
       "      <td>/Restaurant_Review-g186525-d5498966-Reviews-It...</td>\n",
       "      <td>d5498966</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46584</th>\n",
       "      <td>id_2988</td>\n",
       "      <td>['Pizza']</td>\n",
       "      <td>2990.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[['Brilliant'], ['09/16/2016']]</td>\n",
       "      <td>/Restaurant_Review-g190454-d5973311-Reviews-Pi...</td>\n",
       "      <td>d5973311</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45731</th>\n",
       "      <td>id_985</td>\n",
       "      <td>['Italian', 'American', 'Bar', 'European', 'Ve...</td>\n",
       "      <td>987.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>459.0</td>\n",
       "      <td>[['Dinner and breakfast', 'Simple cuisine'], [...</td>\n",
       "      <td>/Restaurant_Review-g187849-d7356053-Reviews-L_...</td>\n",
       "      <td>d7356053</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1441</th>\n",
       "      <td>id_1441</td>\n",
       "      <td>['Italian', 'Pizza', 'Vegetarian Friendly', 'V...</td>\n",
       "      <td>3046.0</td>\n",
       "      <td>$</td>\n",
       "      <td>76.0</td>\n",
       "      <td>[['Good and Fast Pizza Place', 'delicious pizz...</td>\n",
       "      <td>/Restaurant_Review-g186338-d9467743-Reviews-Pi...</td>\n",
       "      <td>d9467743</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 95 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Restaurant_id                                      Cuisine Style  \\\n",
       "30448       id_4718                                           ['Thai']   \n",
       "48905       id_1682                               ['Italian', 'Pizza']   \n",
       "46584       id_2988                                          ['Pizza']   \n",
       "45731        id_985  ['Italian', 'American', 'Bar', 'European', 'Ve...   \n",
       "1441        id_1441  ['Italian', 'Pizza', 'Vegetarian Friendly', 'V...   \n",
       "\n",
       "       Ranking Price Range  Number of Reviews  \\\n",
       "30448   4720.0           0                5.0   \n",
       "48905   1688.0    $$ - $$$               24.0   \n",
       "46584   2990.0           0                3.0   \n",
       "45731    987.0    $$ - $$$              459.0   \n",
       "1441    3046.0           $               76.0   \n",
       "\n",
       "                                                 Reviews  \\\n",
       "30448  [['Nice Thai restaurant', 'Authentic and cheap...   \n",
       "48905  [['AVOID', '2 hours late cardboard pizza :('],...   \n",
       "46584                    [['Brilliant'], ['09/16/2016']]   \n",
       "45731  [['Dinner and breakfast', 'Simple cuisine'], [...   \n",
       "1441   [['Good and Fast Pizza Place', 'delicious pizz...   \n",
       "\n",
       "                                                  URL_TA     ID_TA  sample  \\\n",
       "30448  /Restaurant_Review-g187323-d5510545-Reviews-Kr...  d5510545       1   \n",
       "48905  /Restaurant_Review-g186525-d5498966-Reviews-It...  d5498966       1   \n",
       "46584  /Restaurant_Review-g190454-d5973311-Reviews-Pi...  d5973311       1   \n",
       "45731  /Restaurant_Review-g187849-d7356053-Reviews-L_...  d7356053       1   \n",
       "1441   /Restaurant_Review-g186338-d9467743-Reviews-Pi...  d9467743       0   \n",
       "\n",
       "       Rating  ...  City_Oporto  City_Oslo  City_Paris  City_Prague  \\\n",
       "30448     4.0  ...            0          0           0            0   \n",
       "48905     3.0  ...            0          0           0            0   \n",
       "46584     3.0  ...            0          0           0            0   \n",
       "45731     4.0  ...            0          0           0            0   \n",
       "1441      0.0  ...            0          0           0            0   \n",
       "\n",
       "       City_Rome  City_Stockholm  City_Vienna  City_Warsaw  City_Zurich  \\\n",
       "30448          0               0            0            0            0   \n",
       "48905          0               0            0            0            0   \n",
       "46584          0               0            1            0            0   \n",
       "45731          0               0            0            0            0   \n",
       "1441           0               0            0            0            0   \n",
       "\n",
       "       City_nan  \n",
       "30448         0  \n",
       "48905         0  \n",
       "46584         0  \n",
       "45731         0  \n",
       "1441          0  \n",
       "\n",
       "[5 rows x 95 columns]"
      ]
     },
     "execution_count": 1084,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Возьмем следующий признак \"Price Range\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1085,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:39.269270Z",
     "iopub.status.busy": "2021-05-24T16:42:39.269046Z",
     "iopub.status.idle": "2021-05-24T16:42:39.290924Z",
     "shell.execute_reply": "2021-05-24T16:42:39.289580Z",
     "shell.execute_reply.started": "2021-05-24T16:42:39.269236Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "$$ - $$$    23041\n",
       "0           17361\n",
       "$            7816\n",
       "$$$$         1782\n",
       "Name: Price Range, dtype: int64"
      ]
     },
     "execution_count": 1085,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Price Range'].value_counts()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "По описанию 'Price Range' это - Цены в ресторане.  \n",
    "Их можно поставить по возрастанию (значит это не категориальный признак). А это значит, что их можно заменить последовательными числами, например 1,2,3  \n",
    "*Попробуйте сделать обработку этого признака уже самостоятельно!*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1086,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:39.292630Z",
     "iopub.status.busy": "2021-05-24T16:42:39.292358Z",
     "iopub.status.idle": "2021-05-24T16:42:39.317917Z",
     "shell.execute_reply": "2021-05-24T16:42:39.316910Z",
     "shell.execute_reply.started": "2021-05-24T16:42:39.292569Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 1086,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "price_df = pd.get_dummies(data['Price Range'])\n",
    "data['cheap']=price_df['$']\n",
    "data['average'] = price_df['$$ - $$$']\n",
    "data['expensive'] = price_df['$$$$']\n",
    "data['no_data_price'] = price_df['0']\n",
    "data['Price Range'].isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Для некоторых алгоритмов МЛ даже для не категориальных признаков можно применить One-Hot Encoding, и это может улучшить качество модели. Пробуйте разные подходы к кодированию признака - никто не знает заранее, что может взлететь."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Cuisines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1087,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:39.320439Z",
     "iopub.status.busy": "2021-05-24T16:42:39.320015Z",
     "iopub.status.idle": "2021-05-24T16:42:39.599373Z",
     "shell.execute_reply": "2021-05-24T16:42:39.598145Z",
     "shell.execute_reply.started": "2021-05-24T16:42:39.320364Z"
    }
   },
   "outputs": [],
   "source": [
    "data['Cuisine Style'] = data['Cuisine Style'].str.replace('[', '')\n",
    "data['Cuisine Style'] = data['Cuisine Style'].str.replace(']', '')\n",
    "data['Cuisine Style'] = data['Cuisine Style'].str.replace(\"'\", '')\n",
    "data['Cuisine Style'] = data['Cuisine Style'].str.replace(\" \", '')\n",
    "data['Cuisine Style'] = data['Cuisine Style'].str.split(',')\n",
    "data['Cuisine Style'] = data['Cuisine Style'].fillna(value=' ')\n",
    "data['cuisine_numbers'] = data['Cuisine Style'].apply(lambda x: len(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1088,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:39.601983Z",
     "iopub.status.busy": "2021-05-24T16:42:39.601546Z",
     "iopub.status.idle": "2021-05-24T16:42:39.927937Z",
     "shell.execute_reply": "2021-05-24T16:42:39.926886Z",
     "shell.execute_reply.started": "2021-05-24T16:42:39.601906Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Restaurant_id</th>\n",
       "      <th>Cuisine Style</th>\n",
       "      <th>Ranking</th>\n",
       "      <th>Price Range</th>\n",
       "      <th>Number of Reviews</th>\n",
       "      <th>Reviews</th>\n",
       "      <th>URL_TA</th>\n",
       "      <th>ID_TA</th>\n",
       "      <th>sample</th>\n",
       "      <th>Rating</th>\n",
       "      <th>...</th>\n",
       "      <th>Ukrainian</th>\n",
       "      <th>Uzbek</th>\n",
       "      <th>VeganOptions</th>\n",
       "      <th>VegetarianFriendly</th>\n",
       "      <th>Venezuelan</th>\n",
       "      <th>Vietnamese</th>\n",
       "      <th>Welsh</th>\n",
       "      <th>WineBar</th>\n",
       "      <th>Xinjiang</th>\n",
       "      <th>Yunnan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>id_0</td>\n",
       "      <td>[Bar, Pub]</td>\n",
       "      <td>12963.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>[[], []]</td>\n",
       "      <td>/Restaurant_Review-g187147-d10746918-Reviews-L...</td>\n",
       "      <td>d10746918</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>id_1</td>\n",
       "      <td>[European, Scandinavian, GlutenFreeOptions, Ve...</td>\n",
       "      <td>106.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>97.0</td>\n",
       "      <td>[['Very good reviews!', 'Fine dining in Hakani...</td>\n",
       "      <td>/Restaurant_Review-g189934-d6674944-Reviews-Ra...</td>\n",
       "      <td>d6674944</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>id_2</td>\n",
       "      <td>[VegetarianFriendly]</td>\n",
       "      <td>810.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>28.0</td>\n",
       "      <td>[['Better than the Links', 'Ivy Black'], ['12/...</td>\n",
       "      <td>/Restaurant_Review-g186525-d13129638-Reviews-B...</td>\n",
       "      <td>d13129638</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>id_3</td>\n",
       "      <td>[Italian, Mediterranean, European, VegetarianF...</td>\n",
       "      <td>1669.0</td>\n",
       "      <td>$$$$</td>\n",
       "      <td>202.0</td>\n",
       "      <td>[['Most exquisite', 'Delicious and authentic']...</td>\n",
       "      <td>/Restaurant_Review-g186338-d680417-Reviews-Qui...</td>\n",
       "      <td>d680417</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>id_4</td>\n",
       "      <td>[Italian, Mediterranean, European, Seafood, Ve...</td>\n",
       "      <td>37.0</td>\n",
       "      <td>$$$$</td>\n",
       "      <td>162.0</td>\n",
       "      <td>[['Always the best in bratislava', 'Very good ...</td>\n",
       "      <td>/Restaurant_Review-g274924-d1112354-Reviews-Ma...</td>\n",
       "      <td>d1112354</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49995</th>\n",
       "      <td>id_499</td>\n",
       "      <td>[Italian, VegetarianFriendly, VeganOptions, Gl...</td>\n",
       "      <td>500.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>79.0</td>\n",
       "      <td>[['The real Italian experience!', 'Wonderful f...</td>\n",
       "      <td>/Restaurant_Review-g187849-d2104414-Reviews-Ro...</td>\n",
       "      <td>d2104414</td>\n",
       "      <td>1</td>\n",
       "      <td>4.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49996</th>\n",
       "      <td>id_6340</td>\n",
       "      <td>[French, American, Bar, European, VegetarianFr...</td>\n",
       "      <td>6341.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>542.0</td>\n",
       "      <td>[['Parisian atmosphere', 'Bit pricey but inter...</td>\n",
       "      <td>/Restaurant_Review-g187147-d1800036-Reviews-La...</td>\n",
       "      <td>d1800036</td>\n",
       "      <td>1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49997</th>\n",
       "      <td>id_1649</td>\n",
       "      <td>[Japanese, Sushi]</td>\n",
       "      <td>1652.0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>[['Good by swedish standards', 'A hidden jewel...</td>\n",
       "      <td>/Restaurant_Review-g189852-d947615-Reviews-Sus...</td>\n",
       "      <td>d947615</td>\n",
       "      <td>1</td>\n",
       "      <td>4.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49998</th>\n",
       "      <td>id_640</td>\n",
       "      <td>[Polish, European, EasternEuropean, CentralEur...</td>\n",
       "      <td>641.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>70.0</td>\n",
       "      <td>[['Underground restaurant', 'Oldest Restaurant...</td>\n",
       "      <td>/Restaurant_Review-g274856-d1100838-Reviews-Ho...</td>\n",
       "      <td>d1100838</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49999</th>\n",
       "      <td>id_4824</td>\n",
       "      <td>[Spanish]</td>\n",
       "      <td>4827.0</td>\n",
       "      <td>$$ - $$$</td>\n",
       "      <td>260.0</td>\n",
       "      <td>[['Average', 'Nice an informal'], ['01/31/2016...</td>\n",
       "      <td>/Restaurant_Review-g187849-d1109020-Reviews-Ta...</td>\n",
       "      <td>d1109020</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>50000 rows × 226 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Restaurant_id                                      Cuisine Style  \\\n",
       "0              id_0                                         [Bar, Pub]   \n",
       "1              id_1  [European, Scandinavian, GlutenFreeOptions, Ve...   \n",
       "2              id_2                               [VegetarianFriendly]   \n",
       "3              id_3  [Italian, Mediterranean, European, VegetarianF...   \n",
       "4              id_4  [Italian, Mediterranean, European, Seafood, Ve...   \n",
       "...             ...                                                ...   \n",
       "49995        id_499  [Italian, VegetarianFriendly, VeganOptions, Gl...   \n",
       "49996       id_6340  [French, American, Bar, European, VegetarianFr...   \n",
       "49997       id_1649                                  [Japanese, Sushi]   \n",
       "49998        id_640  [Polish, European, EasternEuropean, CentralEur...   \n",
       "49999       id_4824                                          [Spanish]   \n",
       "\n",
       "       Ranking Price Range  Number of Reviews  \\\n",
       "0      12963.0    $$ - $$$                4.0   \n",
       "1        106.0    $$ - $$$               97.0   \n",
       "2        810.0    $$ - $$$               28.0   \n",
       "3       1669.0        $$$$              202.0   \n",
       "4         37.0        $$$$              162.0   \n",
       "...        ...         ...                ...   \n",
       "49995    500.0    $$ - $$$               79.0   \n",
       "49996   6341.0    $$ - $$$              542.0   \n",
       "49997   1652.0           0                4.0   \n",
       "49998    641.0    $$ - $$$               70.0   \n",
       "49999   4827.0    $$ - $$$              260.0   \n",
       "\n",
       "                                                 Reviews  \\\n",
       "0                                               [[], []]   \n",
       "1      [['Very good reviews!', 'Fine dining in Hakani...   \n",
       "2      [['Better than the Links', 'Ivy Black'], ['12/...   \n",
       "3      [['Most exquisite', 'Delicious and authentic']...   \n",
       "4      [['Always the best in bratislava', 'Very good ...   \n",
       "...                                                  ...   \n",
       "49995  [['The real Italian experience!', 'Wonderful f...   \n",
       "49996  [['Parisian atmosphere', 'Bit pricey but inter...   \n",
       "49997  [['Good by swedish standards', 'A hidden jewel...   \n",
       "49998  [['Underground restaurant', 'Oldest Restaurant...   \n",
       "49999  [['Average', 'Nice an informal'], ['01/31/2016...   \n",
       "\n",
       "                                                  URL_TA      ID_TA  sample  \\\n",
       "0      /Restaurant_Review-g187147-d10746918-Reviews-L...  d10746918       0   \n",
       "1      /Restaurant_Review-g189934-d6674944-Reviews-Ra...   d6674944       0   \n",
       "2      /Restaurant_Review-g186525-d13129638-Reviews-B...  d13129638       0   \n",
       "3      /Restaurant_Review-g186338-d680417-Reviews-Qui...    d680417       0   \n",
       "4      /Restaurant_Review-g274924-d1112354-Reviews-Ma...   d1112354       0   \n",
       "...                                                  ...        ...     ...   \n",
       "49995  /Restaurant_Review-g187849-d2104414-Reviews-Ro...   d2104414       1   \n",
       "49996  /Restaurant_Review-g187147-d1800036-Reviews-La...   d1800036       1   \n",
       "49997  /Restaurant_Review-g189852-d947615-Reviews-Sus...    d947615       1   \n",
       "49998  /Restaurant_Review-g274856-d1100838-Reviews-Ho...   d1100838       1   \n",
       "49999  /Restaurant_Review-g187849-d1109020-Reviews-Ta...   d1109020       1   \n",
       "\n",
       "       Rating  ...  Ukrainian  Uzbek  VeganOptions  VegetarianFriendly  \\\n",
       "0         0.0  ...          0      0             0                   0   \n",
       "1         0.0  ...          0      0             1                   1   \n",
       "2         0.0  ...          0      0             0                   1   \n",
       "3         0.0  ...          0      0             0                   1   \n",
       "4         0.0  ...          0      0             0                   1   \n",
       "...       ...  ...        ...    ...           ...                 ...   \n",
       "49995     4.5  ...          0      0             1                   1   \n",
       "49996     3.5  ...          0      0             0                   1   \n",
       "49997     4.5  ...          0      0             0                   0   \n",
       "49998     4.0  ...          0      0             0                   1   \n",
       "49999     3.0  ...          0      0             0                   0   \n",
       "\n",
       "       Venezuelan  Vietnamese  Welsh  WineBar  Xinjiang  Yunnan  \n",
       "0               0           0      0        0         0       0  \n",
       "1               0           0      0        0         0       0  \n",
       "2               0           0      0        0         0       0  \n",
       "3               0           0      0        0         0       0  \n",
       "4               0           0      0        0         0       0  \n",
       "...           ...         ...    ...      ...       ...     ...  \n",
       "49995           0           0      0        0         0       0  \n",
       "49996           0           0      0        0         0       0  \n",
       "49997           0           0      0        0         0       0  \n",
       "49998           0           0      0        0         0       0  \n",
       "49999           0           0      0        0         0       0  \n",
       "\n",
       "[50000 rows x 226 columns]"
      ]
     },
     "execution_count": 1088,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Created dummy values for cuisines, joint with data\n",
    "\n",
    "mlb = MultiLabelBinarizer()\n",
    "cuisines_df = pd.DataFrame(mlb.fit_transform(data['Cuisine Style']),columns=mlb.classes_)\n",
    "data= data.join(cuisines_df)\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1089,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:39.930002Z",
     "iopub.status.busy": "2021-05-24T16:42:39.929642Z",
     "iopub.status.idle": "2021-05-24T16:42:39.945224Z",
     "shell.execute_reply": "2021-05-24T16:42:39.943788Z",
     "shell.execute_reply.started": "2021-05-24T16:42:39.929934Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 1089,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Reviews'].isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reviews"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1090,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:39.947592Z",
     "iopub.status.busy": "2021-05-24T16:42:39.947266Z",
     "iopub.status.idle": "2021-05-24T16:42:40.268073Z",
     "shell.execute_reply": "2021-05-24T16:42:40.266699Z",
     "shell.execute_reply.started": "2021-05-24T16:42:39.947540Z"
    }
   },
   "outputs": [],
   "source": [
    "import re\n",
    "from datetime import datetime\n",
    "\n",
    "pattern = re.compile(\"\\d+\\/\\d+\\/\\d+\")\n",
    "\n",
    "dates = data['Reviews'].apply(pattern.findall)\n",
    "\n",
    "data['Date_of_Reviews1'] = pd.to_datetime(dates.apply(lambda x: x[0] if len(x) > 0 else None))\n",
    "data['Date_of_Reviews2'] = pd.to_datetime(dates.apply(lambda x: x[1] if len(x) > 1 else None))\n",
    "\n",
    "# display(data.loc[:, ['date1', 'date2']].sample(5))\n",
    "# data['Date_of_Reviews'] = data['Reviews'].apply(pattern.findall)\n",
    "# data['Date_of_Reviews1']=pd.to_datetime(data['Date_of_Reviews'].str[0])\n",
    "# data['Date_of_Reviews2']=pd.to_datetime(data['Date_of_Reviews'].str[1])\n",
    "data['Delta_time'] = (data['Date_of_Reviews1']-data['Date_of_Reviews2'])\n",
    "data['Delta_time'] = pd.to_numeric(data['Delta_time'].dt.days, downcast='integer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1091,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:40.276206Z",
     "iopub.status.busy": "2021-05-24T16:42:40.275821Z",
     "iopub.status.idle": "2021-05-24T16:42:40.296266Z",
     "shell.execute_reply": "2021-05-24T16:42:40.294842Z",
     "shell.execute_reply.started": "2021-05-24T16:42:40.276143Z"
    }
   },
   "outputs": [],
   "source": [
    "# defined function to determine the emotion based on the words in the reviews (MAE decreased on 0.02)\n",
    "import string\n",
    "from collections import Counter\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def emotions(text):\n",
    "\n",
    "    # reading reviews from dataset\n",
    "\n",
    "    # converting to lowercase\n",
    "    lower_case = text.lower()\n",
    "\n",
    "    # Removing punctuations\n",
    "    cleaned_text = lower_case.translate(str.maketrans('', '', string.punctuation))\n",
    "\n",
    "#     # splitting text into words\n",
    "    tokenized_words = cleaned_text.split()\n",
    "\n",
    "    stop_words = [\"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \"yourself\",\n",
    "                  \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \"herself\", \"it\", \"its\", \"itself\",\n",
    "                  \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\",\n",
    "                  \"those\", \"am\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\",\n",
    "                  \"does\", \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \"while\",\n",
    "                  \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \"through\", \"during\", \"before\",\n",
    "                  \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\",\n",
    "                  \"further\", \"then\", \"once\", \"here\", \"there\", \"when\", \"where\", \"why\", \"how\", \"all\", \"any\", \"both\", \"each\",\n",
    "                  \"few\", \"more\", \"most\", \"other\", \"some\", \"such\", \"no\", \"nor\", \"not\", \"only\", \"own\", \"same\", \"so\", \"than\",\n",
    "                  \"too\", \"very\", \"s\", \"t\", \"can\", \"will\", \"just\", \"don\", \"should\", \"now\"]\n",
    "\n",
    "#         # Removing stop words from the tokenized words list\n",
    "    final_words = []\n",
    "    for word in tokenized_words:\n",
    "        if word not in stop_words:\n",
    "            final_words.append(word)\n",
    "\n",
    "#     # NLP Emotion Algorithm\n",
    "#     # 1) Check if the word in the final word list is also present in emotion.txt\n",
    "#     #  - open the emotion file\n",
    "#     #  - Loop through each line and clear it\n",
    "#     #  - Extract the word and emotion using split\n",
    "\n",
    "#     # 2) If word is present -> Add the emotion to emotion_list\n",
    "#     # 3) Finally count each emotion in the emotion list\n",
    "\n",
    "    emotion_list = []\n",
    "    with open('../input/emotionstxt/emotions.txt', 'r') as file:\n",
    "        for line in file:\n",
    "            clear_line = line.replace(\"\\n\", '').replace(\",\", '').replace(\"'\", '').strip()\n",
    "            word, emotion = clear_line.split(':')\n",
    "\n",
    "            if word in final_words:\n",
    "                emotion_list.append(emotion)\n",
    "\n",
    "    \n",
    "#     w = Counter(emotion_list)- not used\n",
    "    return (emotion_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1092,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:42:40.298773Z",
     "iopub.status.busy": "2021-05-24T16:42:40.298391Z",
     "iopub.status.idle": "2021-05-24T16:43:54.463477Z",
     "shell.execute_reply": "2021-05-24T16:43:54.462750Z",
     "shell.execute_reply.started": "2021-05-24T16:42:40.298710Z"
    }
   },
   "outputs": [],
   "source": [
    "#added emotions column to the dataframe\n",
    "data['emotion']=data[\"Reviews\"].apply(emotions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1093,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:43:54.465560Z",
     "iopub.status.busy": "2021-05-24T16:43:54.465038Z",
     "iopub.status.idle": "2021-05-24T16:43:54.592981Z",
     "shell.execute_reply": "2021-05-24T16:43:54.592094Z",
     "shell.execute_reply.started": "2021-05-24T16:43:54.465514Z"
    }
   },
   "outputs": [],
   "source": [
    "#created dummy variables from the list of emotions\n",
    "mlb = MultiLabelBinarizer()\n",
    "emotion_df = pd.DataFrame(mlb.fit_transform(data['emotion']),columns=mlb.classes_)\n",
    "data= data.join(emotion_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1094,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:43:54.594520Z",
     "iopub.status.busy": "2021-05-24T16:43:54.594152Z",
     "iopub.status.idle": "2021-05-24T16:43:54.728547Z",
     "shell.execute_reply": "2021-05-24T16:43:54.727875Z",
     "shell.execute_reply.started": "2021-05-24T16:43:54.594480Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 50000 entries, 0 to 49999\n",
      "Columns: 263 entries, Restaurant_id to  surprise\n",
      "dtypes: datetime64[ns](2), float64(4), int64(161), object(7), uint8(89)\n",
      "memory usage: 70.6+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### EDA"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Посмотрим распределение признака"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1095,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:43:54.730489Z",
     "iopub.status.busy": "2021-05-24T16:43:54.729941Z",
     "iopub.status.idle": "2021-05-24T16:43:55.256245Z",
     "shell.execute_reply": "2021-05-24T16:43:55.255044Z",
     "shell.execute_reply.started": "2021-05-24T16:43:54.730443Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc31890c7f0>"
      ]
     },
     "execution_count": 1095,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['figure.figsize'] = (10,7)\n",
    "df_train['Ranking'].hist(bins=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "У нас много ресторанов, которые не дотягивают и до 2500 места в своем городе, а что там по городам?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1096,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:43:55.259537Z",
     "iopub.status.busy": "2021-05-24T16:43:55.258669Z",
     "iopub.status.idle": "2021-05-24T16:43:55.719722Z",
     "shell.execute_reply": "2021-05-24T16:43:55.718654Z",
     "shell.execute_reply.started": "2021-05-24T16:43:55.259449Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc318878ac8>"
      ]
     },
     "execution_count": 1096,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_train['City'].value_counts(ascending=True).plot(kind='barh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "А кто-то говорил, что французы любят поесть=) Посмотрим, как изменится распределение в большом городе:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1097,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:43:55.722352Z",
     "iopub.status.busy": "2021-05-24T16:43:55.721665Z",
     "iopub.status.idle": "2021-05-24T16:43:56.229032Z",
     "shell.execute_reply": "2021-05-24T16:43:56.228041Z",
     "shell.execute_reply.started": "2021-05-24T16:43:55.722290Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc31884be10>"
      ]
     },
     "execution_count": 1097,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_train['Ranking'][df_train['City'] =='London'].hist(bins=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1098,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:43:56.231693Z",
     "iopub.status.busy": "2021-05-24T16:43:56.230995Z",
     "iopub.status.idle": "2021-05-24T16:43:59.496471Z",
     "shell.execute_reply": "2021-05-24T16:43:59.495412Z",
     "shell.execute_reply.started": "2021-05-24T16:43:56.231610Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# посмотрим на топ 10 городов\n",
    "for x in (df_train['City'].value_counts())[0:10].index:\n",
    "    df_train['Ranking'][df_train['City'] == x].hist(bins=100)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Получается, что Ranking имеет нормальное распределение, просто в больших городах больше ресторанов, из-за мы этого имеем смещение.\n",
    "\n",
    ">Подумайте как из этого можно сделать признак для вашей модели. Я покажу вам пример, как визуализация помогает находить взаимосвязи. А далее действуйте без подсказок =) \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Посмотрим распределение целевой переменной"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1099,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:43:59.499180Z",
     "iopub.status.busy": "2021-05-24T16:43:59.498457Z",
     "iopub.status.idle": "2021-05-24T16:43:59.772633Z",
     "shell.execute_reply": "2021-05-24T16:43:59.771678Z",
     "shell.execute_reply.started": "2021-05-24T16:43:59.499117Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc31870fe48>"
      ]
     },
     "execution_count": 1099,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_train['Rating'].value_counts(ascending=True).plot(kind='barh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Посмотрим распределение целевой переменной относительно признака"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1100,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:43:59.775220Z",
     "iopub.status.busy": "2021-05-24T16:43:59.774524Z",
     "iopub.status.idle": "2021-05-24T16:44:00.280597Z",
     "shell.execute_reply": "2021-05-24T16:44:00.279611Z",
     "shell.execute_reply.started": "2021-05-24T16:43:59.775157Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc2fc50acc0>"
      ]
     },
     "execution_count": 1100,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_train['Ranking'][df_train['Rating'] == 5].hist(bins=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1101,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:44:00.283264Z",
     "iopub.status.busy": "2021-05-24T16:44:00.282558Z",
     "iopub.status.idle": "2021-05-24T16:44:00.784886Z",
     "shell.execute_reply": "2021-05-24T16:44:00.783807Z",
     "shell.execute_reply.started": "2021-05-24T16:44:00.283201Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc310b91390>"
      ]
     },
     "execution_count": 1101,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_train['Ranking'][df_train['Rating'] < 4].hist(bins=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### И один из моих любимых - [корреляция признаков](https://ru.wikipedia.org/wiki/Корреляция)\n",
    "На этом графике уже сейчас вы сможете заметить, как признаки связаны между собой и с целевой переменной."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1102,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:44:00.787668Z",
     "iopub.status.busy": "2021-05-24T16:44:00.786898Z",
     "iopub.status.idle": "2021-05-24T16:44:09.586914Z",
     "shell.execute_reply": "2021-05-24T16:44:09.586204Z",
     "shell.execute_reply.started": "2021-05-24T16:44:00.787587Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc31f58f748>"
      ]
     },
     "execution_count": 1102,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['figure.figsize'] = (15,10)\n",
    "sns.heatmap(data.drop(['sample'], axis=1).corr(),)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Вообще благодаря визуализации в этом датасете можно узнать много интересных фактов, например:\n",
    "* где больше Пицерий в Мадриде или Лондоне?\n",
    "* в каком городе кухня ресторанов более разнообразна?\n",
    "\n",
    "придумайте свои вопрос и найдите на него ответ в данных)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Preprocessing\n",
    "Теперь, для удобства и воспроизводимости кода, завернем всю обработку в одну большую функцию."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1103,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T16:44:09.588293Z",
     "iopub.status.busy": "2021-05-24T16:44:09.587952Z",
     "iopub.status.idle": "2021-05-24T16:44:09.868010Z",
     "shell.execute_reply": "2021-05-24T16:44:09.867319Z",
     "shell.execute_reply.started": "2021-05-24T16:44:09.588255Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 50000 entries, 0 to 49999\n",
      "Data columns (total 11 columns):\n",
      "Restaurant_id        50000 non-null object\n",
      "City                 50000 non-null object\n",
      "Cuisine Style        38410 non-null object\n",
      "Ranking              50000 non-null float64\n",
      "Price Range          32639 non-null object\n",
      "Number of Reviews    46800 non-null float64\n",
      "Reviews              49998 non-null object\n",
      "URL_TA               50000 non-null object\n",
      "ID_TA                50000 non-null object\n",
      "sample               50000 non-null int64\n",
      "Rating               50000 non-null float64\n",
      "dtypes: float64(3), int64(1), object(7)\n",
      "memory usage: 4.2+ MB\n"
     ]
    }
   ],
   "source": [
    "# на всякий случай, заново подгружаем данные\n",
    "df_train = pd.read_csv(DATA_DIR+'/main_task.csv')\n",
    "df_test = pd.read_csv(DATA_DIR+'/kaggle_task.csv')\n",
    "df_train['sample'] = 1 # помечаем где у нас трейн\n",
    "df_test['sample'] = 0 # помечаем где у нас тест\n",
    "df_test['Rating'] = 0 # в тесте у нас нет значения Rating, мы его должны предсказать, по этому пока просто заполняем нулями\n",
    "\n",
    "data = df_test.append(df_train, sort=False).reset_index(drop=True) # объединяем\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1157,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T17:07:19.985544Z",
     "iopub.status.busy": "2021-05-24T17:07:19.985152Z",
     "iopub.status.idle": "2021-05-24T17:07:20.041443Z",
     "shell.execute_reply": "2021-05-24T17:07:20.040236Z",
     "shell.execute_reply.started": "2021-05-24T17:07:19.985488Z"
    }
   },
   "outputs": [],
   "source": [
    "def preproc_data(df_input):\n",
    "    '''includes several functions to pre-process the predictor data.'''\n",
    "    \n",
    "    df_output = df_input.copy()\n",
    "    \n",
    "    # ################### 1. Предобработка ############################################################## \n",
    "    # убираем не нужные для модели признаки\n",
    "    df_output.drop(['Restaurant_id','ID_TA',], axis = 1, inplace=True)\n",
    "    \n",
    "    \n",
    "    # ################### 2. NAN ############################################################## \n",
    "    # Далее заполняем пропуски, вы можете попробовать заполнением средним или средним по городу и тд...\n",
    "    df_output['Number of Reviews'].fillna(0, inplace=True)\n",
    "    df_output['Cuisine Style_isNAN'] = pd.isna(df_output['Cuisine Style']).astype('uint8')\n",
    "    df_output['Price Range']=df_output['Price Range'].fillna(value = '0')\n",
    "    df_output['Number_of_Reviews_isNAN'] = pd.isna(df_output['Number of Reviews']).astype('uint8')\n",
    "    df_output['Number of Reviews'].fillna(0, inplace=True)\n",
    "    df_output['Reviews'] = df_output['Reviews'].fillna('[[], []]')\n",
    " \n",
    "\n",
    "\n",
    "    \n",
    "    # ################### 3. Encoding ############################################################## \n",
    "    # для One-Hot Encoding в pandas есть готовая функция - get_dummies. Особенно радует параметр dummy_na\n",
    "    \n",
    "    city_population = {'Paris':13024, 'Stockholm':2391, 'London':14257, \n",
    "                   'Berlin':6144, 'Munich':5991, 'Oporto':1721,\n",
    "                   'Milan':4336, 'Bratislava':659, 'Vienna':2600, \n",
    "                   'Rome':4342, 'Barcelona':5474, 'Madrid':6791,\n",
    "                   'Dublin':1417, 'Brussels':2500, 'Zurich':415, \n",
    "                   'Warsaw':3100, 'Budapest':3011, 'Copenhagen':2057,\n",
    "                   'Amsterdam':2480, 'Lyon':2323, 'Hamburg':5107, \n",
    "                   'Lisbon':2827, 'Prague':2677, 'Oslo':1588,\n",
    "                   'Helsinki':1525, 'Edinburgh':901, 'Geneva':201, \n",
    "                   'Ljubljana':537, 'Athens':2928,'Luxembourg':633, \n",
    "                   'Krakow':1752}\n",
    "    #number of rests in the City & people population\n",
    "    \n",
    "    rest_per_city = df_output.City.value_counts().to_dict()\n",
    "    df_output['Ranking_Rest_Num'] = df_output.apply(lambda r: (r['Ranking'] / rest_per_city[r.City]), axis=1)\n",
    "    df_output['Ranking_Population'] = df_output.apply(lambda r: (r['Ranking'] / city_population[r.City]), axis=1)\n",
    "    \n",
    "    countries = {\"London\": 'England',\n",
    "                'Paris':'France1', \n",
    "                'Madrid': 'France1',\n",
    "                'Barcelona': 'Spain1',\n",
    "                'Berlin': 'Germany1',\n",
    "                'Milan': 'Italy1',\n",
    "                'Rome': 'Italy1',\n",
    "                'Prague': 'Czech_Republic1',\n",
    "                'Lisbon': 'Portugal1',\n",
    "                'Vienna':  'Austria1',\n",
    "                'Amsterdam': 'Netherlands1',\n",
    "                'Brussels' : 'Belgium1',\n",
    "                'Hamburg' : 'Germany1',\n",
    "                'Munich': 'Germany1',\n",
    "                'Lyon' : 'France1',\n",
    "                'Stockholm': 'Sweden1',\n",
    "                 'Budapest': 'Hungary1',\n",
    "                 'Warsaw': 'Poland1',\n",
    "                 'Dublin' : 'Ireland1',\n",
    "                 'Copenhagen': 'Denmark1',\n",
    "                 'Athens': 'Greek1',\n",
    "                 'Edinburgh': 'Scotland1',\n",
    "                 'Zurich':'Switzerland1',\n",
    "                 'Oporto':'Portugal',\n",
    "                 'Geneva':'Switzerland1',\n",
    "                 'Krakow':'Polish1',\n",
    "                 'Oslo': 'Norway1',\n",
    "                 'Helsinki': 'Finland1',\n",
    "                 'Bratislava': 'Slovakia1',\n",
    "                 'Luxembourg': 'Luxembourg1',\n",
    "                 'Ljubljana': 'Slovenia1'}\n",
    "    def assign_country (city):\n",
    "        return countries[city]\n",
    "    \n",
    "    df_output['Country'] = df_output['City'].apply(assign_country)\n",
    "    country_df = pd.get_dummies(df_output.Country)\n",
    "    df_output= df_output.join(country_df)\n",
    "    df_output = pd.get_dummies(df_output, columns=[ 'Country',], dummy_na=True)\n",
    "    df_output = pd.get_dummies(df_output, columns=[ 'City',], dummy_na=True)\n",
    "    \n",
    "    price_df = pd.get_dummies(df_output['Price Range'])\n",
    "    df_output['cheap']=price_df['$']\n",
    "    df_output['average'] = price_df['$$ - $$$']\n",
    "    df_output['expensive'] = price_df['$$$$']\n",
    "    df_output['no_df_output_price'] = price_df['0']\n",
    "    \n",
    "    df_output['Cuisine Style'] = df_output['Cuisine Style'].str.replace('[', '')\n",
    "    df_output['Cuisine Style'] = df_output['Cuisine Style'].str.replace(']', '')\n",
    "    df_output['Cuisine Style'] = df_output['Cuisine Style'].str.replace(\"'\", '')\n",
    "    df_output['Cuisine Style'] = df_output['Cuisine Style'].str.replace(\" \", '')\n",
    "    df_output['Cuisine Style'] = df_output['Cuisine Style'].str.split(',')\n",
    "    df_output['Cuisine Style'] = df_output['Cuisine Style'].fillna(value=' ')\n",
    "    df_output['cuisine_numbers'] = df_output['Cuisine Style'].apply(lambda x: len(x))\n",
    "    \n",
    "    mlb = MultiLabelBinarizer()\n",
    "    cuisines_df = pd.DataFrame(mlb.fit_transform(df_output['Cuisine Style']),columns=mlb.classes_)\n",
    "    df_output= df_output.join(cuisines_df)\n",
    "    \n",
    "    import re\n",
    "    from datetime import datetime\n",
    "\n",
    "    pattern = re.compile(\"\\d+\\/\\d+\\/\\d+\")\n",
    "\n",
    "    dates = df_output['Reviews'].apply(pattern.findall)\n",
    "\n",
    "    df_output['Date_of_Reviews1'] = pd.to_datetime(dates.apply(lambda x: x[0] if len(x) > 0 else None))\n",
    "    df_output['Date_of_Reviews2'] = pd.to_datetime(dates.apply(lambda x: x[1] if len(x) > 1 else None))\n",
    "    df_output['Delta_time'] = (df_output['Date_of_Reviews1']-df_output['Date_of_Reviews2'])\n",
    "    df_output['Delta_time'] = pd.to_numeric(df_output['Delta_time'].dt.days, downcast='integer')\n",
    "    df_output.drop(['Date_of_Reviews1', 'Date_of_Reviews2'], inplace=True, axis=1)\n",
    "    \n",
    "    import string\n",
    "    from collections import Counter\n",
    "\n",
    "    import matplotlib.pyplot as plt\n",
    "\n",
    "    def emotions(text):\n",
    "\n",
    "        # reading reviews from dataset\n",
    "\n",
    "        # converting to lowercase\n",
    "        lower_case = text.lower()\n",
    "\n",
    "        # Removing punctuations\n",
    "        cleaned_text = lower_case.translate(str.maketrans('', '', string.punctuation))\n",
    "\n",
    "    #     # splitting text into words\n",
    "        tokenized_words = cleaned_text.split()\n",
    "\n",
    "        stop_words = [\"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \"yourself\",\n",
    "                      \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \"herself\", \"it\", \"its\", \"itself\",\n",
    "                      \"they\", \"them\", \"their\", \"theirs\", \"themselves\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\",\n",
    "                      \"those\", \"am\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\",\n",
    "                      \"does\", \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \"while\",\n",
    "                      \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \"through\", \"during\", \"before\",\n",
    "                      \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\",\n",
    "                      \"further\", \"then\", \"once\", \"here\", \"there\", \"when\", \"where\", \"why\", \"how\", \"all\", \"any\", \"both\", \"each\",\n",
    "                      \"few\", \"more\", \"most\", \"other\", \"some\", \"such\", \"no\", \"nor\", \"not\", \"only\", \"own\", \"same\", \"so\", \"than\",\n",
    "                      \"too\", \"very\", \"s\", \"t\", \"can\", \"will\", \"just\", \"don\", \"should\", \"now\"]\n",
    "\n",
    "    #         # Removing stop words from the tokenized words list\n",
    "        final_words = []\n",
    "        for word in tokenized_words:\n",
    "            if word not in stop_words:\n",
    "                final_words.append(word)\n",
    "\n",
    "    #     # NLP Emotion Algorithm\n",
    "    #     # 1) Check if the word in the final word list is also present in emotion.txt\n",
    "    #     #  - open the emotion file\n",
    "    #     #  - Loop through each line and clear it\n",
    "    #     #  - Extract the word and emotion using split\n",
    "\n",
    "    #     # 2) If word is present -> Add the emotion to emotion_list\n",
    "    #     # 3) Finally count each emotion in the emotion list\n",
    "\n",
    "        emotion_list = []\n",
    "        with open('../input/emotionstxt/emotions.txt', 'r') as file:\n",
    "            for line in file:\n",
    "                clear_line = line.replace(\"\\n\", '').replace(\",\", '').replace(\"'\", '').strip()\n",
    "                word, emotion = clear_line.split(':')\n",
    "\n",
    "                if word in final_words:\n",
    "                    emotion_list.append(emotion)\n",
    "\n",
    "\n",
    "        #     w = Counter(emotion_list)- not used\n",
    "            return (emotion_list)\n",
    "    \n",
    "    df_output['emotion']=df_output[\"Reviews\"].apply(emotions)\n",
    "    mlb = MultiLabelBinarizer()\n",
    "    emotion_df = pd.DataFrame(mlb.fit_transform(df_output['emotion']),columns=mlb.classes_)\n",
    "    df_output= df_output.join(emotion_df)\n",
    "    \n",
    "    \n",
    "\n",
    "    \n",
    "    # ################### 5. Clean #################################################### \n",
    "    # убираем признаки которые еще не успели обработать, \n",
    "    # модель на признаках с dtypes \"object\" обучаться не будет, просто выберим их и удалим\n",
    "    object_columns = [s for s in df_output.columns if df_output[s].dtypes == 'object']\n",
    "    df_output.drop(object_columns, axis = 1, inplace=True)\n",
    "    df_output.Delta_time.fillna(0, inplace=True)\n",
    "    \n",
    "    return df_output"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">По хорошему, можно было бы перевести эту большую функцию в класс и разбить на подфункции (согласно ООП). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Запускаем и проверяем что получилось"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1158,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T17:07:25.743205Z",
     "iopub.status.busy": "2021-05-24T17:07:25.742791Z",
     "iopub.status.idle": "2021-05-24T17:08:45.588308Z",
     "shell.execute_reply": "2021-05-24T17:08:45.586902Z",
     "shell.execute_reply.started": "2021-05-24T17:07:25.743127Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ranking                0\n",
       "Number of Reviews      0\n",
       "sample                 0\n",
       "Rating                 0\n",
       "Cuisine Style_isNAN    0\n",
       "                      ..\n",
       " powerless             0\n",
       " sad                   0\n",
       " safe                  0\n",
       " singled out           0\n",
       " surprise              0\n",
       "Length: 256, dtype: int64"
      ]
     },
     "execution_count": 1158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_preproc = preproc_data(data)\n",
    "df_preproc.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1159,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T17:09:43.675169Z",
     "iopub.status.busy": "2021-05-24T17:09:43.674765Z",
     "iopub.status.idle": "2021-05-24T17:09:43.704878Z",
     "shell.execute_reply": "2021-05-24T17:09:43.703935Z",
     "shell.execute_reply.started": "2021-05-24T17:09:43.675112Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 50000 entries, 0 to 49999\n",
      "Columns: 256 entries, Ranking to  surprise\n",
      "dtypes: float64(6), int64(161), uint8(89)\n",
      "memory usage: 67.9 MB\n"
     ]
    }
   ],
   "source": [
    "df_preproc.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1160,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T17:09:46.121027Z",
     "iopub.status.busy": "2021-05-24T17:09:46.120586Z",
     "iopub.status.idle": "2021-05-24T17:09:46.266711Z",
     "shell.execute_reply": "2021-05-24T17:09:46.265298Z",
     "shell.execute_reply.started": "2021-05-24T17:09:46.120959Z"
    }
   },
   "outputs": [],
   "source": [
    "# Теперь выделим тестовую часть\n",
    "train_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\n",
    "test_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n",
    "\n",
    "y = train_data.Rating.values            # наш таргет\n",
    "X = train_data.drop(['Rating'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Перед тем как отправлять наши данные на обучение, разделим данные на еще один тест и трейн, для валидации. \n",
    "Это поможет нам проверить, как хорошо наша модель работает, до отправки submissiona на kaggle.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1161,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T17:09:53.963107Z",
     "iopub.status.busy": "2021-05-24T17:09:53.962733Z",
     "iopub.status.idle": "2021-05-24T17:09:54.052891Z",
     "shell.execute_reply": "2021-05-24T17:09:54.051521Z",
     "shell.execute_reply.started": "2021-05-24T17:09:53.963052Z"
    }
   },
   "outputs": [],
   "source": [
    "# Воспользуемся специальной функцие train_test_split для разбивки тестовых данных\n",
    "# выделим 20% данных на валидацию (параметр test_size)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1162,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T17:09:57.296931Z",
     "iopub.status.busy": "2021-05-24T17:09:57.296574Z",
     "iopub.status.idle": "2021-05-24T17:09:57.303455Z",
     "shell.execute_reply": "2021-05-24T17:09:57.302523Z",
     "shell.execute_reply.started": "2021-05-24T17:09:57.296877Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((10000, 255), (40000, 255), (40000, 254), (32000, 254), (8000, 254))"
      ]
     },
     "execution_count": 1162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# проверяем\n",
    "test_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model \n",
    "Сам ML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1163,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T17:10:01.398770Z",
     "iopub.status.busy": "2021-05-24T17:10:01.398419Z",
     "iopub.status.idle": "2021-05-24T17:10:01.404774Z",
     "shell.execute_reply": "2021-05-24T17:10:01.403236Z",
     "shell.execute_reply.started": "2021-05-24T17:10:01.398711Z"
    }
   },
   "outputs": [],
   "source": [
    "# Импортируем необходимые библиотеки:\n",
    "from sklearn.ensemble import RandomForestRegressor # инструмент для создания и обучения модели\n",
    "from sklearn import metrics # инструменты для оценки точности модели"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1164,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T17:10:03.421239Z",
     "iopub.status.busy": "2021-05-24T17:10:03.420798Z",
     "iopub.status.idle": "2021-05-24T17:10:03.427293Z",
     "shell.execute_reply": "2021-05-24T17:10:03.426296Z",
     "shell.execute_reply.started": "2021-05-24T17:10:03.421179Z"
    }
   },
   "outputs": [],
   "source": [
    "# Создаём модель (НАСТРОЙКИ НЕ ТРОГАЕМ)\n",
    "model = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1165,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T17:10:05.919423Z",
     "iopub.status.busy": "2021-05-24T17:10:05.918975Z",
     "iopub.status.idle": "2021-05-24T17:10:33.267507Z",
     "shell.execute_reply": "2021-05-24T17:10:33.264962Z",
     "shell.execute_reply.started": "2021-05-24T17:10:05.919344Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend ThreadingBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  42 tasks      | elapsed:   11.6s\n",
      "[Parallel(n_jobs=-1)]: Done 100 out of 100 | elapsed:   26.9s finished\n",
      "[Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=4)]: Done  42 tasks      | elapsed:    0.0s\n",
      "[Parallel(n_jobs=4)]: Done 100 out of 100 | elapsed:    0.1s finished\n"
     ]
    }
   ],
   "source": [
    "# Обучаем модель на тестовом наборе данных\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Используем обученную модель для предсказания рейтинга ресторанов в тестовой выборке.\n",
    "# Предсказанные значения записываем в переменную y_pred\n",
    "y_pred = model.predict(X_test)\n",
    "y_pred =  (y_pred * 2).round(0) / 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1166,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T17:10:38.799555Z",
     "iopub.status.busy": "2021-05-24T17:10:38.799178Z",
     "iopub.status.idle": "2021-05-24T17:10:38.806818Z",
     "shell.execute_reply": "2021-05-24T17:10:38.805816Z",
     "shell.execute_reply.started": "2021-05-24T17:10:38.799501Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 0.1715\n"
     ]
    }
   ],
   "source": [
    "# Сравниваем предсказанные значения (y_pred) с реальными (y_test), и смотрим насколько они в среднем отличаются\n",
    "# Метрика называется Mean Absolute Error (MAE) и показывает среднее отклонение предсказанных значений от фактических.\n",
    "print('MAE:', metrics.mean_absolute_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2021-05-24T16:44:10.786145Z",
     "iopub.status.idle": "2021-05-24T16:44:10.786494Z"
    }
   },
   "outputs": [],
   "source": [
    "# в RandomForestRegressor есть возможность вывести самые важные признаки для модели\n",
    "plt.rcParams['figure.figsize'] = (10,10)\n",
    "feat_importances = pd.Series(model.feature_importances_, index=X.columns)\n",
    "feat_importances.nlargest(15).plot(kind='barh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Submission\n",
    "Если все устраевает - готовим Submission на кагл"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1167,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T17:11:21.303239Z",
     "iopub.status.busy": "2021-05-24T17:11:21.302493Z",
     "iopub.status.idle": "2021-05-24T17:11:21.334882Z",
     "shell.execute_reply": "2021-05-24T17:11:21.334168Z",
     "shell.execute_reply.started": "2021-05-24T17:11:21.302846Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ranking</th>\n",
       "      <th>Number of Reviews</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Cuisine Style_isNAN</th>\n",
       "      <th>Number_of_Reviews_isNAN</th>\n",
       "      <th>Ranking_Rest_Num</th>\n",
       "      <th>Ranking_Population</th>\n",
       "      <th>Austria1</th>\n",
       "      <th>Belgium1</th>\n",
       "      <th>Czech_Republic1</th>\n",
       "      <th>...</th>\n",
       "      <th>hated</th>\n",
       "      <th>independent</th>\n",
       "      <th>lost</th>\n",
       "      <th>loved</th>\n",
       "      <th>lustful</th>\n",
       "      <th>powerless</th>\n",
       "      <th>sad</th>\n",
       "      <th>safe</th>\n",
       "      <th>singled out</th>\n",
       "      <th>surprise</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2132</th>\n",
       "      <td>5294.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.965108</td>\n",
       "      <td>1.220941</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>445.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.936842</td>\n",
       "      <td>0.291803</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7935</th>\n",
       "      <td>1691.0</td>\n",
       "      <td>145.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.498085</td>\n",
       "      <td>0.308915</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>385</th>\n",
       "      <td>891.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.875789</td>\n",
       "      <td>0.584262</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5682</th>\n",
       "      <td>671.0</td>\n",
       "      <td>266.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.369493</td>\n",
       "      <td>0.250654</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4913</th>\n",
       "      <td>2078.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.261688</td>\n",
       "      <td>0.735055</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>316</th>\n",
       "      <td>1891.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.148148</td>\n",
       "      <td>0.668907</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6289</th>\n",
       "      <td>1509.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.317904</td>\n",
       "      <td>0.251878</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4029</th>\n",
       "      <td>7278.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.011817</td>\n",
       "      <td>0.510486</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3440</th>\n",
       "      <td>14653.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.037119</td>\n",
       "      <td>1.027776</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 255 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Ranking  Number of Reviews  Rating  Cuisine Style_isNAN  \\\n",
       "2132   5294.0               25.0     0.0                    0   \n",
       "98      445.0               48.0     0.0                    0   \n",
       "7935   1691.0              145.0     0.0                    0   \n",
       "385     891.0                3.0     0.0                    0   \n",
       "5682    671.0              266.0     0.0                    0   \n",
       "4913   2078.0                0.0     0.0                    0   \n",
       "316    1891.0                5.0     0.0                    0   \n",
       "6289   1509.0                0.0     0.0                    0   \n",
       "4029   7278.0               61.0     0.0                    0   \n",
       "3440  14653.0               13.0     0.0                    1   \n",
       "\n",
       "      Number_of_Reviews_isNAN  Ranking_Rest_Num  Ranking_Population  Austria1  \\\n",
       "2132                        0          1.965108            1.220941         0   \n",
       "98                          0          0.936842            0.291803         0   \n",
       "7935                        0          0.498085            0.308915         0   \n",
       "385                         0          1.875789            0.584262         0   \n",
       "5682                        0          0.369493            0.250654         0   \n",
       "4913                        0          1.261688            0.735055         0   \n",
       "316                         0          1.148148            0.668907         0   \n",
       "6289                        0          1.317904            0.251878         0   \n",
       "4029                        0          1.011817            0.510486         0   \n",
       "3440                        0          2.037119            1.027776         0   \n",
       "\n",
       "      Belgium1  Czech_Republic1  ...   hated   independent   lost   loved  \\\n",
       "2132         0                0  ...       0             0      0       0   \n",
       "98           0                0  ...       0             0      0       0   \n",
       "7935         0                0  ...       0             0      0       0   \n",
       "385          0                0  ...       0             0      0       0   \n",
       "5682         0                1  ...       0             0      0       0   \n",
       "4913         0                0  ...       0             0      0       0   \n",
       "316          0                0  ...       0             0      0       0   \n",
       "6289         0                0  ...       0             0      0       0   \n",
       "4029         0                0  ...       0             0      0       0   \n",
       "3440         0                0  ...       0             0      0       0   \n",
       "\n",
       "       lustful   powerless   sad   safe   singled out   surprise  \n",
       "2132         0           0     0      0             0          0  \n",
       "98           0           0     0      0             0          0  \n",
       "7935         0           0     0      0             0          0  \n",
       "385          0           0     0      0             0          0  \n",
       "5682         0           0     0      0             0          0  \n",
       "4913         0           0     0      0             0          0  \n",
       "316          0           0     0      0             0          0  \n",
       "6289         0           0     0      0             0          0  \n",
       "4029         0           0     0      0             0          0  \n",
       "3440         0           0     0      0             0          0  \n",
       "\n",
       "[10 rows x 255 columns]"
      ]
     },
     "execution_count": 1167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1168,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T17:11:26.029784Z",
     "iopub.status.busy": "2021-05-24T17:11:26.029435Z",
     "iopub.status.idle": "2021-05-24T17:11:26.040879Z",
     "shell.execute_reply": "2021-05-24T17:11:26.039338Z",
     "shell.execute_reply.started": "2021-05-24T17:11:26.029727Z"
    }
   },
   "outputs": [],
   "source": [
    "test_data = test_data.drop(['Rating'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1169,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T17:11:29.440430Z",
     "iopub.status.busy": "2021-05-24T17:11:29.439974Z",
     "iopub.status.idle": "2021-05-24T17:11:29.453025Z",
     "shell.execute_reply": "2021-05-24T17:11:29.452369Z",
     "shell.execute_reply.started": "2021-05-24T17:11:29.440388Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Restaurant_id</th>\n",
       "      <th>Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>id_0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>id_1</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>id_2</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>id_3</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>id_4</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>id_9995</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>id_9996</td>\n",
       "      <td>1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>id_9997</td>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>id_9998</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>id_9999</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Restaurant_id  Rating\n",
       "0             id_0     2.0\n",
       "1             id_1     2.5\n",
       "2             id_2     4.0\n",
       "3             id_3     1.0\n",
       "4             id_4     4.0\n",
       "...            ...     ...\n",
       "9995       id_9995     3.0\n",
       "9996       id_9996     1.5\n",
       "9997       id_9997     4.5\n",
       "9998       id_9998     1.0\n",
       "9999       id_9999     2.5\n",
       "\n",
       "[10000 rows x 2 columns]"
      ]
     },
     "execution_count": 1169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1170,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T17:11:33.080468Z",
     "iopub.status.busy": "2021-05-24T17:11:33.080019Z",
     "iopub.status.idle": "2021-05-24T17:11:33.301025Z",
     "shell.execute_reply": "2021-05-24T17:11:33.299980Z",
     "shell.execute_reply.started": "2021-05-24T17:11:33.080426Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=4)]: Done  42 tasks      | elapsed:    0.1s\n",
      "[Parallel(n_jobs=4)]: Done 100 out of 100 | elapsed:    0.1s finished\n"
     ]
    }
   ],
   "source": [
    "predict_submission = model.predict(test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1171,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T17:11:37.076002Z",
     "iopub.status.busy": "2021-05-24T17:11:37.075564Z",
     "iopub.status.idle": "2021-05-24T17:11:37.084114Z",
     "shell.execute_reply": "2021-05-24T17:11:37.082731Z",
     "shell.execute_reply.started": "2021-05-24T17:11:37.075941Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3.005, 4.3  , 4.475, ..., 3.06 , 4.5  , 4.25 ])"
      ]
     },
     "execution_count": 1171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1172,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-24T17:11:49.213179Z",
     "iopub.status.busy": "2021-05-24T17:11:49.212827Z",
     "iopub.status.idle": "2021-05-24T17:11:49.259543Z",
     "shell.execute_reply": "2021-05-24T17:11:49.258428Z",
     "shell.execute_reply.started": "2021-05-24T17:11:49.213121Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Restaurant_id</th>\n",
       "      <th>Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>id_0</td>\n",
       "      <td>3.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>id_1</td>\n",
       "      <td>4.300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>id_2</td>\n",
       "      <td>4.475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>id_3</td>\n",
       "      <td>4.345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>id_4</td>\n",
       "      <td>4.495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>id_5</td>\n",
       "      <td>4.465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>id_6</td>\n",
       "      <td>2.745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>id_7</td>\n",
       "      <td>2.170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>id_8</td>\n",
       "      <td>4.075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>id_9</td>\n",
       "      <td>4.635</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Restaurant_id  Rating\n",
       "0          id_0   3.005\n",
       "1          id_1   4.300\n",
       "2          id_2   4.475\n",
       "3          id_3   4.345\n",
       "4          id_4   4.495\n",
       "5          id_5   4.465\n",
       "6          id_6   2.745\n",
       "7          id_7   2.170\n",
       "8          id_8   4.075\n",
       "9          id_9   4.635"
      ]
     },
     "execution_count": 1172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_submission['Rating'] = predict_submission\n",
    "sample_submission.to_csv('submission.csv', index=False)\n",
    "sample_submission.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# What's next?\n",
    "Или что делать, чтоб улучшить результат:\n",
    "* Обработать оставшиеся признаки в понятный для машины формат\n",
    "* Посмотреть, что еще можно извлечь из признаков\n",
    "* Сгенерировать новые признаки\n",
    "* Подгрузить дополнительные данные, например: по населению или благосостоянию городов\n",
    "* Подобрать состав признаков\n",
    "\n",
    "В общем, процесс творческий и весьма увлекательный! Удачи в соревновании!\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
